#!/usr/bin/env node

var getafix = require('..'),
    _ = require('underscore'),
    info = require('../package.json'),

    yargs = require('yargs')
      .usage('getafix [options] dir')
      .describe('only-new', 'Only fetch the new items, don\'t update existing fixtures')
      .boolean('only-new')
      ['default']('only-new', false)
      .alias('only-new', 'n')
      .describe('version', 'Print version information and quit.')
      .alias('version', 'v')
      .describe('help', 'Print help information and quit.')
      .alias('help', 'h'),

    args = yargs.argv,
    dir = _.first(args._) || process.cwd();

if (args.version) {
  console.log(info.name + ' ' + info.version);
  process.exit(0);
} else if (args.help) {
  yargs.showHelp();
  process.exit(0);
}


println('Getafixing...');

getafix(dir, displayProgress, args).then(
  function () {
    println('Done.');
  },
  console.log.bind(console, 'Error'),
);

function displayProgress(info) {
  switch (info.type) {
    case 'before':
      println('Found ' + info.size + ' fixtures to update.');
      break;
    case 'requesting':
      println('Requesting ' + info.file.replace(process.cwd(), ''));
      move(0, -1);
      break;
    case 'success':
      clearLine();
      break;
    case 'warning':
      clearLine();
      println('WARNING: ' + info.code + ' when requesting ' + info.url);
      break;
  }
}

function move(xDiff, yDiff) {
  print(
    (xDiff > 0 ? '\u001b[' + xDiff + 'C' : xDiff < 0 ? '\u001b[' + (-xDiff) + 'D' : '')
     + (yDiff > 0 ? '\u001b[' + yDiff + 'B' : yDiff < 0 ? '\u001b[' + (-yDiff) + 'A' : '')
  );
}

function print(text) {
  process.stdout.write(text);
}
function println(text) {
  process.stdout.write((text || '') + '\n');
}

function clearLine() {
  print('\u001b[K');
}
